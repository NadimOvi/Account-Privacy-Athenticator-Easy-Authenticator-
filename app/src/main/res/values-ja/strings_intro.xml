<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="intro_slide1_title">さあ、始めましょう</string>
    <string name="intro_slide1_desc"><b>easyauthenticator</b> へようこそ、このウィザードでは初期設定をご案内します。注意して慎重に読んでください。誤った操作を行うと、データを失う可能性があります！
\n\n
安心してください、いずれの設定も後から <b>設定</b> で変更可能です。</string>
    <string name="intro_slide2_desc">アカウントのセキュリティを確保するために <b>easyauthenticator</b> はデータを暗号化されたデータファイルに保存します。ここでは、使用する暗号化方式を選択できます。</string>
    <string name="intro_slide2_desc_keystore">キーストアは、暗号化キーを安全に格納するための Android のシステムコンポーネントです。この方法の利点は、キーがデータファイルから切り離されて格納され、ハードウェア暗号化 (デバイスがサポートしている場合) によってバックアップできることです。ただし、キーはアプリのデータと共に格納されないため、<b>この方式では、外部のバックアップソリューション (Titaniumなど) が機能しなくなります</b>。この方法を選択する場合は <b>easyauthenticator</b> によって提供される内部バックアップ機能に依存する必要があります。
\n\n
<b>警告</b>: キーストアは、多くの問題を引き起こすことが知られています、あなたは絶対に必要な場合にのみ、キーストアを使用してください。 <b>easyauthenticator</b> を起動するたびに パスワード/PIN を入力してもかまわない場合は、<b>パスワードベースの暗号化を使用することを強くお勧めします</b>。</string>
    <string name="intro_slide2_desc_password">この方式では、パスワードまたは PIN から生成されたキーを使用してデータを暗号化します。ここでの主な利点は、これが外部バックアップソリューション (Titaniumなど) で動作し、キーストアよりもはるかに障害が発生しにくいことです。ただし <b>easyauthenticator</b> を起動するたびに認証情報を入力する必要があります。</string>
    <string name="intro_slide3_desc_keystore">ここでは <b>easyauthenticator</b> をロックする認証を設定できます。暗号化方式として <b>Android キーストア</b> を選択したため、これはオプションです。</string>
    <string name="intro_slide3_desc_password">ここでは <b>easyauthenticator</b> をロックする認証を設定できます。暗号化方式として <b>パスワード / PIN</b> を選択したため、続行するにはパスワードまたは PIN のいずれかを設定する必要があります。</string>
    <string name="intro_slide3_warn_no_password">続行するにはパスワードを設定してください！</string>
    <string name="intro_slide3_warn_no_pin">続行するには PIN を設定してください！</string>
    <string name="intro_slide3_warn_confirm_password">続行するには確認パスワードを入力してください！</string>
    <string name="intro_slide3_warn_confirm_pin">続行するには確認 PIN を入力してください！</string>
    <string name="intro_slide4_title">完了しました</string>
    <string name="intro_slide4_desc">あなたの設定は保存されました、 <b>easyauthenticator</b> を使用する準備が完了しました！</string>
</resources>
